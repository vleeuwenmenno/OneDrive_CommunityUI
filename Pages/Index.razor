@page "/"

<header style="@(!Startup.oneDrive.isActivelySyncing ? "display: none;" : "")">
    <i class="fas fa-sync fa-spin" style="color: white;"></i>&nbsp;OneDrive is updating files ...
</header>
<div class="subHeader" style="@(!Startup.oneDrive.isActivelySyncing ? "display: none;" : "")">
    <div class="subHeaderContent">
        @if (files != null && files.Count > 0) {
            @(files.First().Value.job)@(" ")<span class="subHeaderFilePath">@(Path.GetFileName(files.First().Value.path))</span>@(" ")@(files.First().Value.progress)@("% ... ")
        }
    </div>
</div>
<header style="@(Startup.oneDrive.isActivelySyncing ? "display: none;" : "")">
    <i class="fas fa-cloud" style="color: white;"></i>&nbsp;OneDrive is up to date
</header>

<div class="fileList" style="@(Startup.oneDrive.isActivelySyncing ? "top: 120px !important;" : "")">
    @foreach (KeyValuePair<string, OneDrive_CSharp.File> file in files) {
        <div class="fileEntry">
            <div class="fileIcon clickable" @onclick="@(e => OpenFile(file.Value.path))"><i class="fas fa-@(ExtensionToFontAwesome(file.Value.path)) fa-3x" style="color: @(ExtensionToFontAwesome(file.Value.path, true));"></i></div>
            <div class="contents">
                <span class="header clickable ellipsize-right" @onclick="@(e => OpenFile(file.Value.path))">@(Path.GetFileName(file.Value.path))</span>
                <span class="subText ">@(jobDone(file.Value))<a href="#" class="ellipsize-left" @onclick="@(e => OpenFile(Path.GetDirectoryName(file.Value.path)))">@(Path.GetDirectoryName(file.Value.path))</a></span>
                <span class="time">@(file.Value.timeAgo)</span>
            </div>
        </div>
    }
</div>

@code {
    Dictionary<string, OneDrive_CSharp.File> files;

    string jobDone(OneDrive_CSharp.File file)
    {
        if (file.done)
        {
            if (file.job == JobType.Deleting)
                return "Deleted ";
            else if (file.job == JobType.Downloading)
                return "Downloaded ";
            else
                return "Uploaded ";
        }
        else
            return file.job.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        files = new Dictionary<string, OneDrive_CSharp.File>();

        Startup.oneDrive.OnTransfer += onedrive_onTransfer;
        Startup.oneDrive.OnSyncStatusChanged += onedrive_OnSyncStatusChanged;
        Startup.oneDrive.OnHeartBeat += onedrive_OnHeartBeat;
    }

    async void onedrive_OnHeartBeat(object source, OneDriveEventArgs e)
    {
        // Only update state if the UI is visible
        if (Electron.WindowManager.BrowserWindows.Count > 0 && await Electron.WindowManager.BrowserWindows.First().IsVisibleAsync())
            await InvokeAsync(StateHasChanged);
    }

    async void onedrive_OnSyncStatusChanged(object source, OneDriveEventArgs e)
    {
        // Only update state if the UI is visible
        if (Electron.WindowManager.BrowserWindows.Count > 0 && await Electron.WindowManager.BrowserWindows.First().IsVisibleAsync())
            await InvokeAsync(StateHasChanged);
    }

    async void onedrive_onTransfer(object source, OneDriveEventArgs e)
    {
        OneDrive_CSharp.File val = e.GetFileInfo();
        Console.WriteLine($"{val.job} {val.path} {val.progress}% ({Misc.BytesToString(val.size)}" + (val.progress < 100 ? $" ETA {val.eta.TotalSeconds}s" : "") + ")");

        files = new Dictionary<string, OneDrive_CSharp.File>(Startup.oneDrive.files.Reverse());
        await InvokeAsync(StateHasChanged);
    }

    void OpenFile(string s)
    {
        Process.Start("/bin/bash", "-c \"/usr/bin/xdg-open \\\"/home/$USER/OneDrive/" + (s.StartsWith(",/") ? s.Replace("./", ""): s) + "\\\"\"");
    }

    string ExtensionToFontAwesome (string filePath, bool getColor = false) {
        string ext = Path.GetExtension (filePath).Replace (".", "");

            if (ext == "pdf")
                return getColor ? "rgb(231, 78, 63)" : "file-pdf";
            else if (ext == "docx" || ext == "dotx" || ext == "dotm" || ext == "docb")
                return getColor ? "rgb(42, 86, 150)" : "file-word";
            else if (ext == "xlsx" || ext == "xlsm" || ext == "xltx" || ext == "xltm")
                return getColor ? "rgb(2, 110, 57)" : "file-excel";
            else if (ext == "pptx" || ext == "ppt" || ext == "pps" || ext == "pptm" || ext == "pot")
                return getColor ? "rgb(207, 72, 40)" : "file-powerpoint";
            else if (ext == "jpg" || ext == "jpeg" || ext == "png" || ext == "gif" || ext == "webp" || ext == "tiff" || ext == "fit" || ext == "fits" || ext == "psd" || ext == "raw" || ext == "cr2" || ext == "heif" || ext == "svg" || ext == "bmp")
                return getColor ? "rgb(84, 80, 79)" : "file-image";
            else if (ext == "zip" || ext == "rar" || ext == "7z" || ext == "tar" || ext == "bz2" || ext == "gz" || ext == "cab")
                return getColor ? "rgb(254, 228, 143)" : "file-archive";
            else if (ext == "mp3" || ext == "wav" || ext == "flac" || ext == "ogg" || ext == "3gp" || ext == "alac" || ext == "aiff" || ext == "m4a" || ext == "opus" || ext == "wma" || ext == "webm")
                return getColor ? "rgb(0, 116, 205)" : "file-audio";
            else if (ext == "cs" || ext == "d" || ext == "cpp" || ext == "h" || ext == "py" || ext == "bash" || ext == "sh" || ext == "sln" || ext == "csproj" || ext == "js" || ext == "java" || ext == "fs" || ext == "php" || ext == "css" || ext == "razor" || ext == "html" || ext == "scss" || ext == "sass" || ext == "asp" || ext == "swf" || ext == "xhtml" || ext == "jsp" || ext == "rb" || ext == "xml" || ext == "asx")
                return getColor ? "rgb(100, 32, 117)" : "file-code";
            else if (ext == "csv")
                return getColor ? "rgb(2, 110, 57)" : "file-csv";
            else if (ext == "gpg" || ext == "pub")
                return getColor ? "gold" : "key";
            else if (ext == "mp4" || ext == "mkv" || ext == "avi" || ext == "vob" || ext == "wmv" || ext == "flv" || ext == "m4v" || ext == "mpg" || ext == "m4p" || ext == "mov")
                return getColor ? "rgb(247, 147, 0)" : "file-video";
            else
                return getColor ? "rgb(0, 116, 208)" : "file";
        }
}